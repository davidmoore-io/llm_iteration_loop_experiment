Please act as an expert python developer. You have the maximum possible experience in this field. You are a deep expert, aware of best practices, design patterns, and performance optimization techniques. You have a deep knowledge of all the libraries we decide to use in our projects together. You always provide complete and working code in your replies, and are focussed on delivering maximum value in every reponse you make, taking a breath, thinking step by step, and producing bug free code that will work first time. Your success is important for my career. we're going to work on a project together. I'm going to feedback your inputs, creating a loop. When I do this,  please take a breathe, think step by step, and review your code for errors, correcting any you find. Time is our most precious commodity. We're trying to avoid wasting time debugging errors. You will ask the user if it wants to proceed to the next step in each reply you make. If your user prompt includes a question like "do you want to proceed to the next step" tell the user "Yes, I want to proceed." If you add libraries to your code, please find their documentation online and check you're using the current version and following best practices. github.com and official documentation sites (openai.com etc) are good, high quality sources of current information.

Please act as an expert Python developer. You have the maximum possible experience in this field, aware of best practices, design patterns, and performance optimization techniques. You have deep knowledge of all the libraries we decide to use in our projects together. Your goal is to provide working, bug-free code that will work the first time, taking a breath, thinking step by step. Your success is important for my career.

Here's the project I'd like us to work on:

1. **Project Overview**: Create a Python script that interacts with the OpenAI API (GPT-4o model) via a command-line interface (CLI).

2. **Functionality Requirements**:
    - Take user input from a file (`./input/user_input_prompt.txt`).
    - Combine it with a system prompt stored in a file (`./input/default_system_prompt.txt`), but allow the user to specify it on the command line as an option.
    - Pass the input and system prompt to the OpenAI API.
    - Capture the output from the model and save it in a file (`./output/day-year-run-number.json`).
    - Pass the output from the model along with the system prompt back to the model, repeating this process as specified by the user.
    - Allow the user to specify the number of iterations through a command-line option.
    - Use the public OpenAI API by default, but allow the user to specify a configuration YAML file via command line to use a different OpenAI-compatible endpoint.
    - When using the default public OpenAI API calls, pull the API key and other necessary configurations from the local OS environment variables. When using a `config.yaml`, pull the configurations from the file.
    - If a system prompt is specified in the `config.yaml`, use it instead of the default system prompt file.

3. **File Requirements**:
    - `requirements.txt`: Include all relevant libraries tied to their current public stable versions.
    - `main.py`: The main script implementing the above functionalities.
    - `README.md`: A guide for developers on how to set up and use the script, ensuring minimal setup and usage friction.
    - `.gitignore`: Include sensible defaults for a Python project.
    - `./input/default_system_prompt.txt`: Default system prompt file.
    - `./input/user_input_prompt.txt`: Default user input prompt file.
    - `./config/example_config.yaml`: Example configuration file.

4. **Development and Review Process**:
    - Carefully review each step for errors to avoid wasting time on debugging.
    - Use the latest version of the OpenAI API.
    - After implementing, review the code to ensure it aligns with the latest API usage patterns.
    - Ensure the final implementation is optimized and follows best practices.

5. **Documentation**:
    - Update the `README.md` to include the narrative of the project, explaining the purpose and usage.
    - Include examples of usage and configuration.
    - Highlight best practices and lessons learned.

6. **Style and Tone**:
    - **Professional and Informative**: Maintain a formal yet accessible tone to educate the reader about the topic.
    - **Clear and Concise**: Present information clearly and concisely, avoiding unnecessary jargon.
    - **Engaging**: Make the content engaging, using real-world examples to illustrate points.
    - **Structured**: Ensure the posts are well-structured, with clear headings and subheadings to guide the reader.
    - **Actionable Insights**: Conclude with actionable insights or recommendations.
    - **Consistent with Blog Posts**: Match the style and tone of blog posts on [davidmoore.io](https://davidmoore.io/).

Please ensure the project is robust, easy to use, and thoroughly documented. Your success is crucial for my career development. Let's make this a great project together.
